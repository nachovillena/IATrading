"""Interactive menu interface for the trading system"""

import os
import sys
from typing import Dict, List, Any
from pathlib import Path
import yaml
from datetime import datetime, timedelta

from ..services.orchestrator import TradingOrchestrator
from ..core.exceptions import TradingSystemError
from ..data.pipeline import DataPipeline
from ..ml.optimization import HyperparameterOptimizer
from ..trading.signals import SignalManager
from ..utils.logger import Logger
from ..utils.utils import graficar_datos

class MenuInterface:
    """Interactive menu interface for the trading system"""

    def __init__(self):
        class_name = self.__class__.__name__
        self.logger = Logger(
            name=class_name,
            to_console=True,
            to_file=f"{class_name}.log"
        )
        self.name = class_name
        self.orchestrator = TradingOrchestrator()
        self.data_pipeline = DataPipeline()
        self.signal_manager = SignalManager()
        self.optimizer = HyperparameterOptimizer()
        self.symbols = self.load_symbols_from_config()
        self.available_strategies = self.load_strategies_from_dir()

        # Men√∫ principal unificado
        self.menu_options = [
            ("Ejecutar flujo completo de an√°lisis y optimizaci√≥n", self.run_full_workflow),
            ("Importar datos externos (API)", self.import_external_data_with_provider_with_dates),
            ("Importar hist√≥rico completo MT5", self.importar_historico_mt5_menu),
            ("Importar archivo local", self.import_local_file),
            ("Validar calidad de datos", self.validate_data_quality),
            ("Limpiar y procesar datos", self.clean_process_data),
            ("Reporte de calidad", self.quality_report),
            ("Forzar actualizaci√≥n de datos", self.force_data_update),
            ("Verificar estructura data/cache", self.verify_structure),
            ("Ver estado de la cach√© para un s√≠mbolo", self.show_cache_status_for_symbol),
            ("Optimizar estrategia espec√≠fica", self.optimize_specific_strategy),
            ("Optimizar todas las estrategias", self.optimize_all_strategies),
            ("Ver resultados de optimizaci√≥n", self.view_optimization_results),
            ("An√°lisis de hiperpar√°metros", self.hyperparameter_analysis),
            ("Generar se√±ales (todas las estrategias)", self.generate_all_signals),
            ("Generar se√±ales (estrategia espec√≠fica)", self.generate_specific_signals),
            ("Ver estado de se√±ales generadas", self.view_signals_status),
            ("Exportar se√±ales a CSV", self.export_signals),
            ("Evaluar rendimiento completo", self.evaluate_performance),
            ("Comparar estrategias", self.compare_strategies),
            ("An√°lisis de riesgo", self.risk_analysis),
            ("Reporte de m√©tricas", self.metrics_report),
            ("Ver configuraci√≥n actual", self.view_config),
            ("Limpiar archivos temporales", self.clean_temp_files),
            ("Ejecutar diagn√≥sticos", self.run_diagnostics),
            ("Ver estado del sistema", self.system_status),
            ("Backup de configuraci√≥n", self.backup_config),
            ("Salir", None),
            ("Visualizar datos hist√≥ricos (gr√°fica)", self.visualizar_datos_historicos)
        ]
    def importar_historico_mt5_menu(self):
        """Importar hist√≥rico completo de MT5 para un s√≠mbolo"""
        print("üìä IMPORTAR HIST√ìRICO COMPLETO MT5")
        symbol = self.get_symbol_input("Seleccione s√≠mbolo para importar hist√≥rico")
        importar_mt5_historico(self.data_pipeline, symbol)
        print("‚úÖ Importaci√≥n masiva finalizada.")

    def run_full_workflow(self):
        """Run the full workflow: import data, optimize, generate signals, backtest, analyze"""
        print("=" * 80)
        print("üöÄ FLUJO COMPLETO DE AN√ÅLISIS Y OPTIMIZACI√ìN")
        print("=" * 80)

        # 1. Selecci√≥n de s√≠mbolo y estrategia(s)
        symbol = self.get_symbol_input("Seleccione s√≠mbolo para el an√°lisis")
        strategies = self.get_strategy_input("Seleccione estrategia para el an√°lisis")

        # 2. Importar datos (opcional en cualquier momento)
        while True:
            print("\n¬øDesea importar o actualizar datos antes de continuar?")
            print("  1. S√≠, importar/actualizar datos")
            print("  2. No, continuar con el flujo")
            choice = input("Opci√≥n: ").strip()
            if choice == "1":
                self.import_external_data_with_provider_with_dates()
            elif choice == "2":
                break

        # 3. Ejecutar el flujo para cada estrategia seleccionada
        for strategy in strategies:
            print(f"\n=== Procesando estrategia: {strategy.upper()} ===")
            # 3. Optimizaci√≥n de la estrategia
            print("\nüéØ OPTIMIZANDO ESTRATEGIA...")
            try:
                trials = input("N√∫mero de trials para optimizaci√≥n (default 100): ").strip()
                trials = int(trials) if trials else 100
                self.logger.info(f"üîÑ Optimizando {strategy.upper()} para {symbol} con {trials} trials...")
                opt_results = self.orchestrator.run_optimization(strategy, symbol, trials)
            except Exception as e:
                self.logger.error(f"‚ùå Error en optimizaci√≥n: {e}")
                continue

            # 4. Generaci√≥n de se√±ales
            print("\nüìà GENERANDO SE√ëALES CON PAR√ÅMETROS √ìPTIMOS...")
            try:
                signals = self.signal_manager.generate_signals(strategy, symbol)
                print(f"‚úÖ {len(signals)} se√±ales generadas para {strategy.upper()}")
            except Exception as e:
                print(f"‚ùå Error al generar se√±ales: {e}")
                continue

            # 5. Backtesting y evaluaci√≥n
            print("\nüìä REALIZANDO BACKTEST Y EVALUACI√ìN...")
            try:
                eval_results = self.orchestrator.run_full_evaluation(strategy, symbol)
                print("\nüìà Resultados de evaluaci√≥n:")
                for k, v in eval_results.items():
                    print(f"  {k}: {v}")
            except Exception as e:
                print(f"‚ùå Error en evaluaci√≥n: {e}")
                continue

            # 6. An√°lisis de m√©tricas y reporte
            print("\nüìã AN√ÅLISIS DE M√âTRICAS Y REPORTE...")
            try:
                metrics_report = self.orchestrator.generate_metrics_report(strategy, symbol)
                print("\nüìä Reporte de m√©tricas generado:")
                print(metrics_report)
            except Exception as e:
                print(f"‚ùå Error al generar reporte: {e}")

        print("\nüöÄ Flujo completo finalizado.")
    
    def display_main_menu(self):
        """Display the unified main menu"""
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            print("=" * 80)
            print("üöÄ SISTEMA DE TRADING IA - MEN√ö PRINCIPAL")
            print("=" * 80)
            for idx, (desc, _) in enumerate(self.menu_options, 1):
                print(f"{idx}. {desc}")
            print("=" * 80)
            try:
                choice = input("\nüîπ Seleccione una opci√≥n: ").strip()
                if not choice.isdigit() or not (1 <= int(choice) <= len(self.menu_options)):
                    print("‚ùå Opci√≥n no v√°lida")
                    input("\nüìå Presione Enter para continuar...")
                    continue
                idx = int(choice) - 1
                if self.menu_options[idx][1] is None:
                    print("\nüëã ¬°Hasta luego!")
                    break
                self.menu_options[idx][1]()
                input("\nüìå Presione Enter para volver al men√∫...")
            except KeyboardInterrupt:
                print("\n\nüëã ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"‚ùå Error inesperado: {e}")
                input("\nüìå Presione Enter para continuar...")

    def get_symbol_input(self, prompt: str = "Seleccione s√≠mbolo") -> str:
        """Get symbol input from user"""
        print(f"\n{prompt}:")
        for i, symbol in enumerate(self.symbols, 1):
            print(f"  {i}. {symbol}")
        
        while True:
            try:
                choice = int(input("\nOpci√≥n: "))
                if 1 <= choice <= len(self.symbols):
                    return self.symbols[choice - 1]
                print("‚ùå Opci√≥n no v√°lida")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero")
    
    def get_strategy_input(self, prompt: str = "Seleccione estrategia") -> List[str]:
        """Get strategy input from user. Si no se indica, devuelve todas."""
        print(f"\n{prompt}:")
        for i, strategy in enumerate(self.available_strategies, 1):
            print(f"  {i}. {strategy.upper()}")
        print(f"  0. TODAS LAS ESTRATEGIAS")

        while True:
            try:
                choice = input("\nOpci√≥n (puede ser un n√∫mero o varios separados por coma, 0 para todas): ").strip()
                if choice == "0" or choice == "":
                    # Si el usuario pulsa 0 o Enter, selecciona todas
                    return self.available_strategies
                # Permitir selecci√≥n m√∫ltiple separada por coma
                indices = [int(x) for x in choice.split(",") if x.strip().isdigit()]
                if all(1 <= idx <= len(self.available_strategies) for idx in indices):
                    return [self.available_strategies[idx - 1] for idx in indices]
                print("‚ùå Opci√≥n no v√°lida")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero o varios separados por coma")

    def import_external_data_with_provider_with_dates(self):
        """Importar datos desde un proveedor externo seleccionado (Yahoo o MT5) con fechas personalizadas"""
        print("üìä IMPORTAR DATOS EXTERNOS (SELECCI√ìN DE PROVIDER Y FECHAS)")
        print("-" * 30)

        # Selecci√≥n de provider
        providers = ['yahoo', 'mt5']
        print("\nSeleccione proveedor de datos:")
        for i, prov in enumerate(providers, 1):
            print(f"  {i}. {prov.upper()}")
        while True:
            try:
                prov_choice = int(input("\nProveedor: "))
                if 1 <= prov_choice <= len(providers):
                    provider = providers[prov_choice - 1]
                    break
                print("‚ùå Opci√≥n no v√°lida")
            except ValueError:
                print("‚ùå Por favor ingrese un n√∫mero")

        symbol = self.get_symbol_input()

        print("\nOpciones de timeframe:")
        timeframes = ['M1', 'M5', 'M15', 'M30', 'H1', 'H4', 'D1']
        for i, tf in enumerate(timeframes, 1):
            print(f"  {i}. {tf}")
        tf_choice = int(input("\nTimeframe: "))
        timeframe = timeframes[tf_choice - 1]

        # Solicitar fechas
        def ask_date(prompt):
            while True:
                date_str = input(prompt).strip()
                try:
                    return datetime.strptime(date_str, "%Y-%m-%d")
                except ValueError:
                    print("‚ùå Formato inv√°lido. Usa AAAA-MM-DD.")

        start_date = ask_date("Fecha de inicio (AAAA-MM-DD): ")
        end_date = ask_date("Fecha final (AAAA-MM-DD): ")

        try:
            print(f"\nüîÑ Importando datos {symbol} {timeframe} desde {provider.upper()} entre {start_date.date()} y {end_date.date()}...")
            result = self.data_pipeline.fetch_data(
                symbol, timeframe, provider=provider,
                start_date=start_date, end_date=end_date,
                allow_download=True  # Permite descarga si no hay en cach√©
            )
            print(f"‚úÖ Datos importados: {len(result.data)} registros")
        except Exception as e:
            print(f"‚ùå Error al importar datos: {e}")
        
    def import_local_file(self):
            """Import data from local file"""
            print("üìÅ IMPORTAR ARCHIVO LOCAL")
            print("-" * 30)
            
            file_path = input("Ruta del archivo: ").strip()
            
            if not Path(file_path).exists():
                print("‚ùå Archivo no encontrado")
                return
            
            try:
                result = self.data_pipeline.import_from_file(file_path)
                print(f"‚úÖ Archivo importado: {len(result)} registros")
                
            except Exception as e:
                print(f"‚ùå Error al importar archivo: {e}")
    
    # Data Management Methods
    def import_external_data(self):
        """Import data from external API"""
        print("üìä IMPORTAR DATOS EXTERNOS")
        print("-" * 30)
        
        symbol = self.get_symbol_input()
        
        print("\nOpciones de timeframe:")
        timeframes = ['M1', 'M5', 'M15', 'M30', 'H1', 'H4', 'D1']
        for i, tf in enumerate(timeframes, 1):
            print(f"  {i}. {tf}")
        
        tf_choice = int(input("\nTimeframe: "))
        timeframe = timeframes[tf_choice - 1]
        
        try:
            print(f"\nüîÑ Importando datos {symbol} {timeframe}...")
            result = self.data_pipeline.fetch_data(symbol, timeframe, source="auto")
            print(f"‚úÖ Datos importados: {len(result)} registros")
            
        except Exception as e:
            print(f"‚ùå Error al importar datos: {e}")

    
    def validate_data_quality(self):
        """Validate data quality"""
        print("‚úÖ VALIDAR CALIDAD DE DATOS")
        print("-" * 30)
        
        try:
            quality_results = self.data_pipeline.quality_controller.check_all_data()
            
            print("\nüìä Resumen de calidad:")
            for symbol, results in quality_results.items():
                print(f"\n{symbol}:")
                for check, status in results.items():
                    status_icon = "‚úÖ" if status else "‚ùå"
                    print(f"  {status_icon} {check}")
            
        except Exception as e:
            print(f"‚ùå Error en validaci√≥n: {e}")
    
    def clean_process_data(self):
        """Clean and process data"""
        print("üßπ LIMPIAR Y PROCESAR DATOS")
        print("-" * 30)
        
        symbol = self.get_symbol_input()
        
        try:
            print(f"\nüîÑ Procesando datos para {symbol}...")
            result = self.data_pipeline.clean_and_process(symbol)
            print(f"‚úÖ Datos procesados: {len(result)} registros v√°lidos")
            
        except Exception as e:
            print(f"‚ùå Error al procesar datos: {e}")
    
    def quality_report(self):
        """Generate quality report"""
        print("üìã REPORTE DE CALIDAD")
        print("-" * 30)
        
        try:
            report = self.data_pipeline.quality_controller.generate_report()
            print("\nüìä Reporte de calidad generado:")
            print(report)
            
        except Exception as e:
            print(f"‚ùå Error al generar reporte: {e}")
    
    def force_data_update(self):
        """Force data update"""
        print("üîÑ FORZAR ACTUALIZACI√ìN DE DATOS")
        print("-" * 30)
        
        symbol = self.get_symbol_input()
        print("\nOpciones de timeframe:")
        timeframes = ['M1', 'M5', 'M15', 'M30', 'H1', 'H4', 'D1']
        for i, tf in enumerate(timeframes, 1):
            print(f"  {i}. {tf}")
        tf_choice = int(input("\nTimeframe: "))
        timeframe = timeframes[tf_choice - 1]

        try:
            print(f"\nüîÑ Actualizando datos para {symbol} [{timeframe}]...")
            result = self.data_pipeline.fetch_data(
                symbol, timeframe, force_update=True, allow_download=True
            )
            print(f"‚úÖ Datos actualizados: {len(result.data)} registros")
        except Exception as e:
            print(f"‚ùå Error al actualizar datos: {e}")
    
    def verify_structure(self):
        """Verify data structure"""
        print("üîç VERIFICAR ESTRUCTURA DATA/CACHE")
        print("-" * 30)
        
        try:
            structure_ok = self.data_pipeline.verify_data_structure()
            if structure_ok:
                print("‚úÖ Estructura de datos correcta")
            else:
                print("‚ùå Problemas en la estructura de datos")
                
        except Exception as e:
            print(f"‚ùå Error al verificar estructura: {e}")
    
    # Optimization Methods
    def optimize_specific_strategy(self):
        """Optimize specific strategy"""
        print("üéØ OPTIMIZAR ESTRATEGIA ESPEC√çFICA")
        print("-" * 30)
        
        strategy = self.get_strategy_input()
        symbol = self.get_symbol_input()
        
        trials = input("\nN√∫mero de trials (default 100): ").strip()
        trials = int(trials) if trials else 100
        
        try:
            print(f"\nüîÑ Optimizando {strategy.upper()} para {symbol}...")
            results = self.orchestrator.run_optimization(strategy, symbol, trials)
            print(f"‚úÖ Optimizaci√≥n completada")
            print(f"üìä Mejores par√°metros: {results.get('best_params', {})}")
            print(f"üéØ Mejor score: {results.get('best_score', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå Error en optimizaci√≥n: {e}")
    
    def optimize_all_strategies(self):
        """Optimize all strategies"""
        print("üéØ OPTIMIZAR TODAS LAS ESTRATEGIAS")
        print("-" * 30)
        
        symbol = self.get_symbol_input()
        
        try:
            for strategy in self.available_strategies:
                print(f"\nüîÑ Optimizando {strategy.upper()}...")
                results = self.orchestrator.run_optimization(strategy, symbol)
                print(f"‚úÖ {strategy.upper()} completado")
                
        except Exception as e:
            print(f"‚ùå Error en optimizaci√≥n: {e}")
    
    def view_optimization_results(self):
        """View optimization results"""
        print("üìä VER RESULTADOS DE OPTIMIZACI√ìN")
        print("-" * 30)
        
        try:
            results = self.orchestrator.get_optimization_results()
            
            if not results:
                print("‚ÑπÔ∏è No hay resultados de optimizaci√≥n disponibles")
                return
            
            for strategy, data in results.items():
                print(f"\nüìà {strategy.upper()}:")
                print(f"  üéØ Score: {data.get('best_score', 'N/A')}")
                print(f"  ‚öôÔ∏è Par√°metros: {data.get('best_params', {})}")
                
        except Exception as e:
            print(f"‚ùå Error al obtener resultados: {e}")
    
    def hyperparameter_analysis(self):
        """Analyze hyperparameters"""
        print("üî¨ AN√ÅLISIS DE HIPERPAR√ÅMETROS")
        print("-" * 30)
        
        strategy = self.get_strategy_input()
        
        try:
            analysis = self.optimizer.analyze_hyperparameters(strategy)
            print(f"\nüìä An√°lisis para {strategy.upper()}:")
            print(analysis)
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis: {e}")
    
    # Signal Generation Methods
    def generate_all_signals(self):
        """Generate signals for all strategies"""
        print("üìà GENERAR SE√ëALES (TODAS LAS ESTRATEGIAS)")
        print("-" * 30)
        
        symbol = self.get_symbol_input()
        
        try:
            for strategy in self.available_strategies:
                print(f"\nüîÑ Generando se√±ales {strategy.upper()}...")
                signals = self.signal_manager.generate_signals(strategy, symbol)
                print(f"‚úÖ {len(signals)} se√±ales generadas para {strategy.upper()}")
                
        except Exception as e:
            print(f"‚ùå Error al generar se√±ales: {e}")
    
    def generate_specific_signals(self):
        """Generate signals for specific strategy"""
        print("üìà GENERAR SE√ëALES (ESTRATEGIA ESPEC√çFICA)")
        print("-" * 30)
        
        strategy = self.get_strategy_input()
        symbol = self.get_symbol_input()
        
        try:
            print(f"\nüîÑ Generando se√±ales {strategy.upper()} para {symbol}...")
            signals = self.signal_manager.generate_signals(strategy, symbol)
            print(f"‚úÖ {len(signals)} se√±ales generadas")
            
            # Show recent signals
            if len(signals) > 0:
                print("\nüìä √öltimas 5 se√±ales:")
                recent = signals.tail(5)
                for _, signal in recent.iterrows():
                    print(f"  {signal['timestamp']} - {signal['signal']} ({signal['confidence']:.2f})")
            
        except Exception as e:
            print(f"‚ùå Error al generar se√±ales: {e}")
    
    def view_signals_status(self):
        """View signals status"""
        print("üìä ESTADO DE SE√ëALES GENERADAS")
        print("-" * 30)
        
        try:
            status = self.signal_manager.get_signals_status()
            
            for strategy, data in status.items():
                print(f"\nüìà {strategy.upper()}:")
                print(f"  üìÖ √öltima actualizaci√≥n: {data.get('last_update', 'N/A')}")
                print(f"  üéØ Total se√±ales: {data.get('total_signals', 0)}")
                print(f"  üìä Se√±ales recientes: {data.get('recent_signals', 0)}")
                
        except Exception as e:
            print(f"‚ùå Error al obtener estado: {e}")
    
    def export_signals(self):
        """Export signals to CSV"""
        print("üíæ EXPORTAR SE√ëALES A CSV")
        print("-" * 30)
        
        strategy = self.get_strategy_input()
        symbol = self.get_symbol_input()
        
        output_path = input("\nRuta de salida (default: signals_export.csv): ").strip()
        if not output_path:
            output_path = "signals_export.csv"
        
        try:
            self.signal_manager.export_signals(strategy, symbol, output_path)
            print(f"‚úÖ Se√±ales exportadas a: {output_path}")
            
        except Exception as e:
            print(f"‚ùå Error al exportar se√±ales: {e}")
    
    # Evaluation Methods
    def evaluate_performance(self):
        """Evaluate complete performance"""
        print("üìä EVALUAR RENDIMIENTO COMPLETO")
        print("-" * 30)
        
        try:
            results = self.orchestrator.run_full_evaluation()
            
            print("\nüìà Resultados de evaluaci√≥n:")
            for strategy, metrics in results.items():
                print(f"\nüéØ {strategy.upper()}:")
                print(f"  üí∞ Sharpe Ratio: {metrics.get('sharpe_ratio', 'N/A'):.4f}")
                print(f"  üìà Total Return: {metrics.get('total_return', 'N/A'):.2%}")
                print(f"  üìâ Max Drawdown: {metrics.get('max_drawdown', 'N/A'):.2%}")
                print(f"  üéØ Win Rate: {metrics.get('win_rate', 'N/A'):.2%}")
                
        except Exception as e:
            print(f"‚ùå Error en evaluaci√≥n: {e}")
    
    def compare_strategies(self):
        """Compare strategies"""
        print("üîÑ COMPARAR ESTRATEGIAS")
        print("-" * 30)
        
        try:
            comparison = self.orchestrator.compare_strategies()
            
            print("\nüìä Comparaci√≥n de estrategias:")
            print(comparison)
            
        except Exception as e:
            print(f"‚ùå Error en comparaci√≥n: {e}")
    
    def risk_analysis(self):
        """Risk analysis"""
        print("‚ö†Ô∏è AN√ÅLISIS DE RIESGO")
        print("-" * 30)
        
        try:
            risk_report = self.orchestrator.analyze_risk()
            print("\nüìä Reporte de riesgo:")
            print(risk_report)
            
        except Exception as e:
            print(f"‚ùå Error en an√°lisis de riesgo: {e}")
    
    def metrics_report(self):
        """Generate metrics report"""
        print("üìã REPORTE DE M√âTRICAS")
        print("-" * 30)
        
        try:
            report = self.orchestrator.generate_metrics_report()
            print("\nüìä Reporte de m√©tricas generado:")
            print(report)
            
        except Exception as e:
            print(f"‚ùå Error al generar reporte: {e}")
    
    # Utility Methods
    def view_config(self):
        """View current configuration"""
        print("‚öôÔ∏è CONFIGURACI√ìN ACTUAL")
        print("-" * 30)
        
        try:
            config = self.orchestrator.config_service.get_config()
            
            print("\nüìù Configuraci√≥n del sistema:")
            for section, values in config.items():
                print(f"\n[{section}]")
                if isinstance(values, dict):
                    for key, value in values.items():
                        print(f"  {key}: {value}")
                else:
                    print(f"  {values}")
                    
        except Exception as e:
            print(f"‚ùå Error al obtener configuraci√≥n: {e}")
    
    def clean_temp_files(self):
        """Clean temporary files"""
        print("üßπ LIMPIAR ARCHIVOS TEMPORALES")
        print("-" * 30)
        
        try:
            cleaned = self.orchestrator.clean_temporary_files()
            print(f"‚úÖ {cleaned} archivos temporales eliminados")
            
        except Exception as e:
            print(f"‚ùå Error al limpiar archivos: {e}")
    
    def run_diagnostics(self):
        """Run system diagnostics"""
        print("üîß EJECUTAR DIAGN√ìSTICOS")
        print("-" * 30)
        
        try:
            diagnostics = self.orchestrator.run_diagnostics()
            
            print("\nüîç Resultados del diagn√≥stico:")
            for check, result in diagnostics.items():
                status_icon = "‚úÖ" if result['status'] else "‚ùå"
                print(f"  {status_icon} {check}: {result['message']}")
                
        except Exception as e:
            print(f"‚ùå Error en diagn√≥sticos: {e}")
    
    def system_status(self):
        """Show system status"""
        print("üìä ESTADO DEL SISTEMA")
        print("-" * 30)
        
        try:
            status = self.orchestrator.get_system_status()
            
            print("\nüìà Estado del sistema:")
            print(f"  üîß Sistema: {status.get('system_health', 'Unknown')}")
            print(f"  üìä Datos: {status.get('data_status', 'Unknown')}")
            print(f"  üéØ Modelos: {status.get('models_status', 'Unknown')}")
            print(f"  üìà Se√±ales: {status.get('signals_status', 'Unknown')}")
            
        except Exception as e:
            print(f"‚ùå Error al obtener estado: {e}")
    
    def backup_config(self):
        """Backup configuration"""
        print("üíæ BACKUP DE CONFIGURACI√ìN")
        print("-" * 30)
        
        backup_name = input("\nNombre del backup (default: auto): ").strip()
        
        try:
            backup_path = self.orchestrator.backup_configuration(backup_name)
            print(f"‚úÖ Configuraci√≥n respaldada en: {backup_path}")
            
        except Exception as e:
            print(f"‚ùå Error al crear backup: {e}")
    
    def load_symbols_from_config(self):
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'config.yaml')
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        return config.get('trading', {}).get('symbols', [])

    def load_strategies_from_dir(self):
        strategies_dir = os.path.join(os.path.dirname(__file__), '..', 'strategies')
        strategies = []
        for entry in os.listdir(strategies_dir):
            entry_path = os.path.join(strategies_dir, entry)
            # Solo directorios y que tengan un strategy.py dentro
            if (
                os.path.isdir(entry_path)
                and not entry.startswith('__')
                and os.path.exists(os.path.join(entry_path, 'strategy.py'))
            ):
                strategies.append(entry)
        return strategies

    def show_cache_status_for_symbol(self):
        """Mostrar estado de la cach√© para un s√≠mbolo (todas las temporalidades)"""
        print("\n=== Estado de la cach√© ===")
        symbol = self.get_symbol_input("Seleccione s√≠mbolo para comprobar la cach√©")
        # Puedes obtener los timeframes del config o definirlos aqu√≠
        timeframes = ['M1', 'M5', 'M15', 'M30', 'H1', 'H4', 'D1']
        print(f"\nEstado de la cach√© para {symbol}:")
        for tf in timeframes:
            try:
                data = self.data_pipeline.fetch_data(
                    symbol=symbol, timeframe=tf, allow_download=False
                )
                if data is None or data.data.empty:
                    print(f"‚ùå Sin datos en cach√© para {tf}")
                else:
                    print(f"‚úÖ Datos en cach√© para {tf} ({len(data.data)} registros)")
            except Exception as e:
                print(f"‚ùå Error al consultar {tf}: {e}")

    def visualizar_datos_historicos(self):
        """Visualizar datos hist√≥ricos con gr√°ficos y alineaci√≥n temporal"""
        print("üìà VISUALIZAR DATOS HIST√ìRICOS")
        print("-" * 30)
        symbol = self.get_symbol_input()
        timeframes = ['M15', 'H1', 'H4']
        data = {}
        for tf in timeframes:
            try:
                result = self.data_pipeline.fetch_data(symbol, tf, allow_download=False)
                if result and not result.data.empty:
                    data[tf] = result.data
            except Exception as e:
                print(f"‚ùå Error al cargar {tf}: {e}")
        if not data:
            print("‚ùå No hay datos para graficar.")
            return
        # Mostrar alineaci√≥n temporal
        from src.utils.utils import chequear_alineacion_temporal
        chequear_alineacion_temporal(data)
        # Preguntar si quiere ver EMAs
        mostrar_ema = input("¬øMostrar EMAs en el gr√°fico? (s/n): ").strip().lower() == 's'
        ema_fast = 12
        ema_slow = 26
        if mostrar_ema:
            try:
                ema_fast = int(input("EMA r√°pida (default 12): ") or 12)
                ema_slow = int(input("EMA lenta (default 26): ") or 26)
            except ValueError:
                print("Valores no v√°lidos, usando 12 y 26.")
        try:
            from src.utils.utils import graficar_datos
            graficar_datos(data, mostrar_ema=mostrar_ema, ema_fast=ema_fast, ema_slow=ema_slow)
        except Exception as e:
            print(f"‚ùå Error al graficar datos: {e}")

def main():
    """Main entry point for the menu interface"""
    try:
        menu = MenuInterface()
        menu.display_main_menu()
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego!")
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

def importar_mt5_historico(pipeline, symbol: str):
    """
    Importa datos hist√≥ricos de MT5 para un s√≠mbolo, usando rangos seg√∫n la temporalidad.
    - M1, M5, M15, M30: mes a mes desde 2019 hasta hoy.
    - H1, H4, D1: a√±o a a√±o desde 2015 hasta hoy.
    """
    timeframes_mes = ['M1', 'M5', 'M15', 'M30']
    timeframes_ano = ['H1', 'H4', 'D1']
    hoy = datetime.now()

    # Rango mes a mes para timeframes de minutos
    for tf in timeframes_mes:
        start = datetime(2019, 1, 1)
        while start < hoy:
            end = (start + timedelta(days=32)).replace(day=1)
            if end > hoy:
                end = hoy
            print(f"Importando {symbol} {tf} desde {start.date()} hasta {end.date()}")
            try:
                pipeline.fetch_data(
                    symbol=symbol,
                    timeframe=tf,
                    provider='mt5',
                    start_date=start,
                    end_date=end,
                    allow_download=True
                )
            except Exception as e:
                print(f"Error importando {symbol} {tf} {start.date()} - {end.date()}: {e}")
            start = end

    # Rango a√±o a a√±o para timeframes mayores
    for tf in timeframes_ano:
        start = datetime(2015, 1, 1)
        while start < hoy:
            end = datetime(start.year + 1, 1, 1)
            if end > hoy:
                end = hoy
            print(f"Importando {symbol} {tf} desde {start.date()} hasta {end.date()}")
            try:
                pipeline.fetch_data(
                    symbol=symbol,
                    timeframe=tf,
                    provider='mt5',
                    start_date=start,
                    end_date=end,
                    allow_download=True
                )
            except Exception as e:
                print(f"Error importando {symbol} {tf} {start.date()} - {end.date()}: {e}")
            start = end

    pipeline.check_cache_integrity('EURUSD', 'M15', 2024)
